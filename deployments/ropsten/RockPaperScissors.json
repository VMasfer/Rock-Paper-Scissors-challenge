{
  "address": "0xe2763f6CF4E0Bd8Dc80eB12ad3A305f21541856f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rpsContractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player1",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "player2",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bet",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "duration",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "encryptedMove",
              "type": "bytes32"
            },
            {
              "internalType": "enum IRockPaperScissors.Hand",
              "name": "decryptedMove",
              "type": "uint8"
            },
            {
              "internalType": "enum IRockPaperScissors.Hand",
              "name": "move",
              "type": "uint8"
            },
            {
              "internalType": "enum IRockPaperScissors.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct IRockPaperScissors.Game",
          "name": "_game",
          "type": "tuple"
        }
      ],
      "name": "GameCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_deleter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player1",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "player2",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bet",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "duration",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "encryptedMove",
              "type": "bytes32"
            },
            {
              "internalType": "enum IRockPaperScissors.Hand",
              "name": "decryptedMove",
              "type": "uint8"
            },
            {
              "internalType": "enum IRockPaperScissors.Hand",
              "name": "move",
              "type": "uint8"
            },
            {
              "internalType": "enum IRockPaperScissors.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct IRockPaperScissors.Game",
          "name": "_game",
          "type": "tuple"
        }
      ],
      "name": "GameDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_ender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player1",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "player2",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bet",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "duration",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "encryptedMove",
              "type": "bytes32"
            },
            {
              "internalType": "enum IRockPaperScissors.Hand",
              "name": "decryptedMove",
              "type": "uint8"
            },
            {
              "internalType": "enum IRockPaperScissors.Hand",
              "name": "move",
              "type": "uint8"
            },
            {
              "internalType": "enum IRockPaperScissors.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct IRockPaperScissors.Game",
          "name": "_game",
          "type": "tuple"
        }
      ],
      "name": "GameEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_starter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player1",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "player2",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bet",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "duration",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "encryptedMove",
              "type": "bytes32"
            },
            {
              "internalType": "enum IRockPaperScissors.Hand",
              "name": "decryptedMove",
              "type": "uint8"
            },
            {
              "internalType": "enum IRockPaperScissors.Hand",
              "name": "move",
              "type": "uint8"
            },
            {
              "internalType": "enum IRockPaperScissors.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct IRockPaperScissors.Game",
          "name": "_game",
          "type": "tuple"
        }
      ],
      "name": "GameStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "RPSBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_burner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "RPSSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Received",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "buyRPS",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_encryptedMove",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_bet",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_duration",
          "type": "uint16"
        }
      ],
      "name": "createGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_seed",
          "type": "bytes"
        }
      ],
      "name": "endGameAsPlayer1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "endGameAsPlayer2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "player2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bet",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "duration",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "encryptedMove",
          "type": "bytes32"
        },
        {
          "internalType": "enum IRockPaperScissors.Hand",
          "name": "decryptedMove",
          "type": "uint8"
        },
        {
          "internalType": "enum IRockPaperScissors.Hand",
          "name": "move",
          "type": "uint8"
        },
        {
          "internalType": "enum IRockPaperScissors.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gamesCreated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveGames",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player1",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "player2",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bet",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "duration",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "encryptedMove",
              "type": "bytes32"
            },
            {
              "internalType": "enum IRockPaperScissors.Hand",
              "name": "decryptedMove",
              "type": "uint8"
            },
            {
              "internalType": "enum IRockPaperScissors.Hand",
              "name": "move",
              "type": "uint8"
            },
            {
              "internalType": "enum IRockPaperScissors.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct IRockPaperScissors.Game[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        }
      ],
      "name": "getActiveGamesByPlayer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player1",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "player2",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bet",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "duration",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "encryptedMove",
              "type": "bytes32"
            },
            {
              "internalType": "enum IRockPaperScissors.Hand",
              "name": "decryptedMove",
              "type": "uint8"
            },
            {
              "internalType": "enum IRockPaperScissors.Hand",
              "name": "move",
              "type": "uint8"
            },
            {
              "internalType": "enum IRockPaperScissors.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct IRockPaperScissors.Game[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActivePlayers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAvailableGames",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player1",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "player2",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bet",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "duration",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "encryptedMove",
              "type": "bytes32"
            },
            {
              "internalType": "enum IRockPaperScissors.Hand",
              "name": "decryptedMove",
              "type": "uint8"
            },
            {
              "internalType": "enum IRockPaperScissors.Hand",
              "name": "move",
              "type": "uint8"
            },
            {
              "internalType": "enum IRockPaperScissors.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct IRockPaperScissors.Game[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        }
      ],
      "name": "getAvailableGamesByPlayer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player1",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "player2",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bet",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "duration",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "encryptedMove",
              "type": "bytes32"
            },
            {
              "internalType": "enum IRockPaperScissors.Hand",
              "name": "decryptedMove",
              "type": "uint8"
            },
            {
              "internalType": "enum IRockPaperScissors.Hand",
              "name": "move",
              "type": "uint8"
            },
            {
              "internalType": "enum IRockPaperScissors.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct IRockPaperScissors.Game[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAvailablePlayers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEtherBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGames",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player1",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "player2",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bet",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "duration",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "encryptedMove",
              "type": "bytes32"
            },
            {
              "internalType": "enum IRockPaperScissors.Hand",
              "name": "decryptedMove",
              "type": "uint8"
            },
            {
              "internalType": "enum IRockPaperScissors.Hand",
              "name": "move",
              "type": "uint8"
            },
            {
              "internalType": "enum IRockPaperScissors.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct IRockPaperScissors.Game[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "enum IRockPaperScissors.Hand",
          "name": "_move",
          "type": "uint8"
        }
      ],
      "name": "playGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "playerToId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "quitGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rps",
      "outputs": [
        {
          "internalType": "contract IRPS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rpsFee",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rpsPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sellRPS",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_rpsFee",
          "type": "uint8"
        }
      ],
      "name": "setRPSFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rpsPrice",
          "type": "uint256"
        }
      ],
      "name": "setRPSPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPlayerIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC20Token",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawEtherBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xedf02da4ad12aaf2a9f02538f0cfab8e561f386971f0ee65f7c5dfb4ef29a150",
  "receipt": {
    "to": null,
    "from": "0x989A31A70cfDb86160d4131fEE7092A8f8702Ed8",
    "contractAddress": "0xe2763f6CF4E0Bd8Dc80eB12ad3A305f21541856f",
    "transactionIndex": 13,
    "gasUsed": "4863716",
    "logsBloom": "0x
    "blockHash": "0x6981a6bfac640823e600bdc848c77c095d35164bd542ea2a190d5cb575db23f7",
    "transactionHash": "0xedf02da4ad12aaf2a9f02538f0cfab8e561f386971f0ee65f7c5dfb4ef29a150",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 11752159,
        "transactionHash": "0xedf02da4ad12aaf2a9f02538f0cfab8e561f386971f0ee65f7c5dfb4ef29a150",
        "address": "0xe2763f6CF4E0Bd8Dc80eB12ad3A305f21541856f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000989a31a70cfdb86160d4131fee7092a8f8702ed8"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0x6981a6bfac640823e600bdc848c77c095d35164bd542ea2a190d5cb575db23f7"
      }
    ],
    "blockNumber": 11752159,
    "cumulativeGasUsed": "7056165",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF64d6e89c6c521405e19f384F95f16e77B2110fE"
  ],
  "solcInputHash": "3ee148255b2d5714913e84c20e0fe8f2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rpsContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedMove\",\"type\":\"bytes32\"},{\"internalType\":\"enum IRockPaperScissors.Hand\",\"name\":\"decryptedMove\",\"type\":\"uint8\"},{\"internalType\":\"enum IRockPaperScissors.Hand\",\"name\":\"move\",\"type\":\"uint8\"},{\"internalType\":\"enum IRockPaperScissors.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IRockPaperScissors.Game\",\"name\":\"_game\",\"type\":\"tuple\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_deleter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedMove\",\"type\":\"bytes32\"},{\"internalType\":\"enum IRockPaperScissors.Hand\",\"name\":\"decryptedMove\",\"type\":\"uint8\"},{\"internalType\":\"enum IRockPaperScissors.Hand\",\"name\":\"move\",\"type\":\"uint8\"},{\"internalType\":\"enum IRockPaperScissors.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IRockPaperScissors.Game\",\"name\":\"_game\",\"type\":\"tuple\"}],\"name\":\"GameDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_ender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedMove\",\"type\":\"bytes32\"},{\"internalType\":\"enum IRockPaperScissors.Hand\",\"name\":\"decryptedMove\",\"type\":\"uint8\"},{\"internalType\":\"enum IRockPaperScissors.Hand\",\"name\":\"move\",\"type\":\"uint8\"},{\"internalType\":\"enum IRockPaperScissors.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IRockPaperScissors.Game\",\"name\":\"_game\",\"type\":\"tuple\"}],\"name\":\"GameEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_starter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedMove\",\"type\":\"bytes32\"},{\"internalType\":\"enum IRockPaperScissors.Hand\",\"name\":\"decryptedMove\",\"type\":\"uint8\"},{\"internalType\":\"enum IRockPaperScissors.Hand\",\"name\":\"move\",\"type\":\"uint8\"},{\"internalType\":\"enum IRockPaperScissors.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IRockPaperScissors.Game\",\"name\":\"_game\",\"type\":\"tuple\"}],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RPSBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RPSSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"buyRPS\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_encryptedMove\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_bet\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_duration\",\"type\":\"uint16\"}],\"name\":\"createGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_seed\",\"type\":\"bytes\"}],\"name\":\"endGameAsPlayer1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"endGameAsPlayer2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedMove\",\"type\":\"bytes32\"},{\"internalType\":\"enum IRockPaperScissors.Hand\",\"name\":\"decryptedMove\",\"type\":\"uint8\"},{\"internalType\":\"enum IRockPaperScissors.Hand\",\"name\":\"move\",\"type\":\"uint8\"},{\"internalType\":\"enum IRockPaperScissors.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gamesCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveGames\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedMove\",\"type\":\"bytes32\"},{\"internalType\":\"enum IRockPaperScissors.Hand\",\"name\":\"decryptedMove\",\"type\":\"uint8\"},{\"internalType\":\"enum IRockPaperScissors.Hand\",\"name\":\"move\",\"type\":\"uint8\"},{\"internalType\":\"enum IRockPaperScissors.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IRockPaperScissors.Game[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getActiveGamesByPlayer\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedMove\",\"type\":\"bytes32\"},{\"internalType\":\"enum IRockPaperScissors.Hand\",\"name\":\"decryptedMove\",\"type\":\"uint8\"},{\"internalType\":\"enum IRockPaperScissors.Hand\",\"name\":\"move\",\"type\":\"uint8\"},{\"internalType\":\"enum IRockPaperScissors.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IRockPaperScissors.Game[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActivePlayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableGames\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedMove\",\"type\":\"bytes32\"},{\"internalType\":\"enum IRockPaperScissors.Hand\",\"name\":\"decryptedMove\",\"type\":\"uint8\"},{\"internalType\":\"enum IRockPaperScissors.Hand\",\"name\":\"move\",\"type\":\"uint8\"},{\"internalType\":\"enum IRockPaperScissors.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IRockPaperScissors.Game[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getAvailableGamesByPlayer\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedMove\",\"type\":\"bytes32\"},{\"internalType\":\"enum IRockPaperScissors.Hand\",\"name\":\"decryptedMove\",\"type\":\"uint8\"},{\"internalType\":\"enum IRockPaperScissors.Hand\",\"name\":\"move\",\"type\":\"uint8\"},{\"internalType\":\"enum IRockPaperScissors.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IRockPaperScissors.Game[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailablePlayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEtherBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGames\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedMove\",\"type\":\"bytes32\"},{\"internalType\":\"enum IRockPaperScissors.Hand\",\"name\":\"decryptedMove\",\"type\":\"uint8\"},{\"internalType\":\"enum IRockPaperScissors.Hand\",\"name\":\"move\",\"type\":\"uint8\"},{\"internalType\":\"enum IRockPaperScissors.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IRockPaperScissors.Game[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"enum IRockPaperScissors.Hand\",\"name\":\"_move\",\"type\":\"uint8\"}],\"name\":\"playGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"quitGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rps\",\"outputs\":[{\"internalType\":\"contract IRPS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rpsFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rpsPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sellRPS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rpsFee\",\"type\":\"uint8\"}],\"name\":\"setRPSFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rpsPrice\",\"type\":\"uint256\"}],\"name\":\"setRPSPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPlayerIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEtherBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RockPaperScissors.sol\":\"RockPaperScissors\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/IRPS.sol\":{\"content\":\"import '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4 <0.9.0;\\n\\ninterface IRPS is IERC20 {\\n  function mint(address, uint256) external;\\n\\n  function burn(address, uint256) external;\\n}\\n\",\"keccak256\":\"0x28696a009515eaa631d0d24a62f35b29dc9de426f1b67f73d0b2a23b10f7462e\",\"license\":\"Unlicense\"},\"contracts/IRockPaperScissors.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4 <0.9.0;\\n\\ninterface IRockPaperScissors {\\n  enum Hand {\\n    IDLE,\\n    ROCK,\\n    PAPER,\\n    SCISSORS\\n  }\\n  enum Status {\\n    CREATED,\\n    STARTED,\\n    PLAYER1,\\n    PLAYER2,\\n    TIE\\n  }\\n  struct Game {\\n    uint256 id;\\n    address player1;\\n    address player2;\\n    uint256 bet;\\n    uint16 duration;\\n    uint256 timestamp;\\n    bytes32 encryptedMove;\\n    Hand decryptedMove;\\n    Hand move;\\n    Status status;\\n  }\\n\\n  function buyRPS() external payable;\\n\\n  function sellRPS(uint256 _amount) external;\\n\\n  function createGame(\\n    bytes32 _encryptedMove,\\n    uint256 _bet,\\n    uint16 _duration\\n  ) external;\\n\\n  function quitGame(uint256 _gameId) external;\\n\\n  function playGame(uint256 _gameId, Hand _move) external;\\n\\n  function endGameAsPlayer1(uint256 _gameId, bytes calldata _seed) external;\\n\\n  function endGameAsPlayer2(uint256 _gameId) external;\\n\\n  function getGames() external view returns (Game[] memory);\\n\\n  function getAvailableGames() external view returns (Game[] memory);\\n\\n  function getAvailableGamesByPlayer(address _player) external view returns (Game[] memory);\\n\\n  function getAvailablePlayers() external view returns (address[] memory);\\n\\n  function getActiveGames() external view returns (Game[] memory);\\n\\n  function getActiveGamesByPlayer(address _player) external view returns (Game[] memory);\\n\\n  function getActivePlayers() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xc24d0621ee979077560e5efb699ab7946ba70eb5e9ce2ac2bead4bfc38e44981\",\"license\":\"Unlicense\"},\"contracts/RockPaperScissors.sol\":{\"content\":\"import '@openzeppelin/contracts/access/Ownable.sol';\\nimport './IRockPaperScissors.sol';\\nimport './IRPS.sol';\\n\\n//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4 <0.9.0;\\n\\ncontract RockPaperScissors is IRockPaperScissors, Ownable {\\n  IRPS public immutable rps;\\n  Game[] public games;\\n  mapping(address => uint256) public playerToId;\\n  mapping(uint256 => uint256) private _gameIdToIndex;\\n  uint256 public gamesCreated;\\n  uint256 public totalPlayerIds;\\n  uint256 public rpsPrice = 0.01 ether;\\n  uint8 public rpsFee = 10;\\n\\n  event GameCreated(address indexed _creator, uint256 indexed _gameId, Game _game);\\n  event GameStarted(address indexed _starter, uint256 indexed _gameId, Game _game);\\n  event GameEnded(address indexed _ender, uint256 indexed _gameId, Game _game);\\n  event GameDeleted(address indexed _deleter, uint256 indexed _gameId, Game _game);\\n  event RPSBought(address indexed _minter, uint256 _amount);\\n  event RPSSold(address indexed _burner, uint256 _amount);\\n  event Received(address indexed _from, uint256 _value);\\n\\n  modifier checkGame(uint256 _gameId, uint256 _path) {\\n    require(games.length != 0, 'The games list is empty');\\n    Game memory gameM = games[_gameIdToIndex[_gameId]];\\n    require(_gameId < gamesCreated, 'Game does not exist');\\n    require(gameM.id == _gameId, 'Game has been deleted');\\n    if (_path == 0) {\\n      require(gameM.status == Status.CREATED, 'Game has already started');\\n    } else if (_path == 1) {\\n      if (gameM.status != Status.STARTED) {\\n        require(gameM.status != Status.CREATED, 'Game has not started yet');\\n        revert('Game has already ended');\\n      }\\n      require(gameM.player1 == msg.sender, 'Player 1 is not you');\\n    } else if (_path == 2) {\\n      require(gameM.player2 == msg.sender, 'Player 2 is not you');\\n    } else {\\n      require(gameM.status == Status.CREATED, 'Game has already started');\\n      require(gameM.player1 == msg.sender, 'Player 1 is not you');\\n    }\\n    _;\\n  }\\n\\n  constructor(address _rpsContractAddress) {\\n    rps = IRPS(_rpsContractAddress);\\n  }\\n\\n  receive() external payable {\\n    if (msg.value > 0) {\\n      emit Received(msg.sender, msg.value);\\n    }\\n  }\\n\\n  fallback() external payable {\\n    revert('Wrong call to contract');\\n  }\\n\\n  function buyRPS() external payable override {\\n    require(msg.value % rpsPrice == 0 && msg.value != 0, 'Wrong ether sent');\\n    uint256 amount = msg.value / rpsPrice;\\n    rps.mint(msg.sender, amount);\\n    emit RPSBought(msg.sender, amount);\\n  }\\n\\n  function sellRPS(uint256 _amount) external override {\\n    require(_amount != 0, 'Token amount cannot be zero');\\n    rps.burn(msg.sender, _amount);\\n    emit RPSSold(msg.sender, _amount);\\n    //solhint-disable-next-line\\n    (bool sent, ) = msg.sender.call{value: rpsPrice * _amount - (rpsPrice * _amount * rpsFee) / 100}('');\\n    require(sent, 'Failed to send ether');\\n  }\\n\\n  function createGame(\\n    bytes32 _encryptedMove,\\n    uint256 _bet,\\n    uint16 _duration\\n  ) external override {\\n    require(_bet <= (2**256 - 2) / 2, 'The bet is too big');\\n    rps.burn(msg.sender, _bet);\\n    Game memory newGame;\\n    newGame.id = gamesCreated++;\\n    newGame.player1 = msg.sender;\\n    newGame.bet = _bet;\\n    newGame.duration = _duration;\\n    newGame.encryptedMove = _encryptedMove;\\n    _gameIdToIndex[newGame.id] = games.length;\\n    games.push(newGame);\\n    emit GameCreated(msg.sender, newGame.id, newGame);\\n    if (playerToId[msg.sender] == 0) {\\n      playerToId[msg.sender] = ++totalPlayerIds;\\n    }\\n  }\\n\\n  function quitGame(uint256 _gameId) external override checkGame(_gameId, 3) {\\n    Game storage game = games[_gameIdToIndex[_gameId]];\\n    rps.mint(msg.sender, game.bet);\\n    _deleteGame(_gameId);\\n  }\\n\\n  function playGame(uint256 _gameId, Hand _move) external override checkGame(_gameId, 0) {\\n    require(_move != Hand.IDLE, 'Invalid move');\\n    Game memory gameM = games[_gameIdToIndex[_gameId]];\\n    rps.burn(msg.sender, gameM.bet);\\n    gameM.player2 = msg.sender;\\n    gameM.timestamp = block.timestamp;\\n    gameM.move = _move;\\n    gameM.status = Status.STARTED;\\n    games[_gameIdToIndex[_gameId]] = gameM;\\n    emit GameStarted(msg.sender, _gameId, gameM);\\n    if (playerToId[msg.sender] == 0) {\\n      playerToId[msg.sender] = ++totalPlayerIds;\\n    }\\n  }\\n\\n  function endGameAsPlayer1(uint256 _gameId, bytes calldata _seed) external override checkGame(_gameId, 1) {\\n    Game memory gameM = _decryptMove(_gameId, _seed);\\n    if (gameM.decryptedMove == gameM.move) {\\n      gameM.status = Status.TIE;\\n      games[_gameIdToIndex[_gameId]] = gameM;\\n      emit GameEnded(msg.sender, _gameId, gameM);\\n      rps.mint(msg.sender, gameM.bet);\\n    } else if ((uint8(gameM.decryptedMove) + 3 - uint8(gameM.move)) % 3 == 1) {\\n      gameM.status = Status.PLAYER1;\\n      games[_gameIdToIndex[_gameId]] = gameM;\\n      emit GameEnded(msg.sender, _gameId, gameM);\\n      rps.mint(msg.sender, gameM.bet * 2);\\n      _deleteGame(_gameId);\\n    } else {\\n      gameM.status = Status.PLAYER2;\\n      games[_gameIdToIndex[_gameId]] = gameM;\\n      emit GameEnded(msg.sender, _gameId, gameM);\\n    }\\n  }\\n\\n  function endGameAsPlayer2(uint256 _gameId) external override checkGame(_gameId, 2) {\\n    Game storage game = games[_gameIdToIndex[_gameId]];\\n    Game memory gameM = games[_gameIdToIndex[_gameId]];\\n    if (gameM.status == Status.TIE) {\\n      rps.mint(msg.sender, gameM.bet);\\n      _deleteGame(_gameId);\\n    } else if (gameM.status == Status.STARTED) {\\n      //solhint-disable-next-line\\n      require(block.timestamp >= gameM.timestamp + gameM.duration, 'Player 1 still has time to reveal his move');\\n      game.status = Status.PLAYER2;\\n      emit GameEnded(msg.sender, _gameId, game);\\n      rps.mint(msg.sender, gameM.bet * 2);\\n      _deleteGame(_gameId);\\n    } else {\\n      rps.mint(msg.sender, gameM.bet * 2);\\n      _deleteGame(_gameId);\\n    }\\n  }\\n\\n  function withdrawEtherBalance(uint256 _amount) external onlyOwner {\\n    require(address(this).balance >= _amount, 'Insufficient ether in balance');\\n    //solhint-disable-next-line\\n    (bool sent, ) = msg.sender.call{value: _amount}('');\\n    require(sent, 'Failed to send ether');\\n  }\\n\\n  function withdrawERC20Token(address _tokenContractAddress, uint256 _amount) external onlyOwner {\\n    IERC20 tokenContract = IERC20(_tokenContractAddress);\\n    tokenContract.transfer(msg.sender, _amount);\\n  }\\n\\n  function setRPSPrice(uint256 _rpsPrice) external onlyOwner {\\n    require(_rpsPrice != 0, 'Token price cannot be zero');\\n    rpsPrice = _rpsPrice;\\n  }\\n\\n  function setRPSFee(uint8 _rpsFee) external onlyOwner {\\n    require(_rpsFee <= 100, 'Invalid fee percentage');\\n    rpsFee = _rpsFee;\\n  }\\n\\n  function getGames() external view override returns (Game[] memory) {\\n    return games;\\n  }\\n\\n  function getAvailableGames() external view override returns (Game[] memory) {\\n    uint256 availableGamesIndex;\\n    for (uint256 i; i < games.length; i++) {\\n      if (games[i].status == Status.CREATED) {\\n        availableGamesIndex++;\\n      }\\n    }\\n    Game[] memory availableGames = new Game[](availableGamesIndex);\\n    delete availableGamesIndex;\\n    for (uint256 i; i < games.length; i++) {\\n      if (games[i].status == Status.CREATED) {\\n        availableGames[availableGamesIndex] = games[i];\\n        availableGamesIndex++;\\n      }\\n    }\\n    return availableGames;\\n  }\\n\\n  function getAvailableGamesByPlayer(address _player) external view override returns (Game[] memory) {\\n    uint256 availableGamesByPlayerIndex;\\n    for (uint256 i; i < games.length; i++) {\\n      if (games[i].status == Status.CREATED && games[i].player1 == _player) {\\n        availableGamesByPlayerIndex++;\\n      }\\n    }\\n    Game[] memory availableGamesByPlayer = new Game[](availableGamesByPlayerIndex);\\n    delete availableGamesByPlayerIndex;\\n    for (uint256 i; i < games.length; i++) {\\n      if (games[i].status == Status.CREATED && games[i].player1 == _player) {\\n        availableGamesByPlayer[availableGamesByPlayerIndex] = games[i];\\n        availableGamesByPlayerIndex++;\\n      }\\n    }\\n    return availableGamesByPlayer;\\n  }\\n\\n  function getAvailablePlayers() external view override returns (address[] memory) {\\n    uint256 preAvailablePlayersIndex;\\n    for (uint256 i; i < games.length; i++) {\\n      if (games[i].status == Status.CREATED) {\\n        preAvailablePlayersIndex++;\\n      }\\n    }\\n    address[] memory preAvailablePlayers = new address[](preAvailablePlayersIndex);\\n    delete preAvailablePlayersIndex;\\n    uint256 availablePlayersIndex;\\n    uint256 playerCount;\\n    for (uint256 i; i < games.length; i++) {\\n      if (games[i].status == Status.CREATED) {\\n        preAvailablePlayers[preAvailablePlayersIndex] = games[i].player1;\\n        preAvailablePlayersIndex++;\\n        for (uint256 j; j < preAvailablePlayersIndex; j++) {\\n          if (preAvailablePlayers[j] == games[i].player1) {\\n            playerCount++;\\n          }\\n        }\\n        if (playerCount == 1) {\\n          availablePlayersIndex++;\\n        }\\n        delete playerCount;\\n      }\\n    }\\n    address[] memory availablePlayers = new address[](availablePlayersIndex);\\n    delete preAvailablePlayersIndex;\\n    delete availablePlayersIndex;\\n    for (uint256 i; i < games.length; i++) {\\n      if (games[i].status == Status.CREATED) {\\n        preAvailablePlayersIndex++;\\n        for (uint256 j; j < preAvailablePlayersIndex; j++) {\\n          if (preAvailablePlayers[j] == games[i].player1) {\\n            playerCount++;\\n          }\\n        }\\n        if (playerCount == 1) {\\n          availablePlayers[availablePlayersIndex] = games[i].player1;\\n          availablePlayersIndex++;\\n        }\\n        delete playerCount;\\n      }\\n    }\\n    return availablePlayers;\\n  }\\n\\n  function getActiveGames() external view override returns (Game[] memory) {\\n    uint256 activeGamesIndex;\\n    for (uint256 i; i < games.length; i++) {\\n      if (games[i].status != Status.CREATED) {\\n        activeGamesIndex++;\\n      }\\n    }\\n    Game[] memory activeGames = new Game[](activeGamesIndex);\\n    delete activeGamesIndex;\\n    for (uint256 i; i < games.length; i++) {\\n      if (games[i].status != Status.CREATED) {\\n        activeGames[activeGamesIndex] = games[i];\\n        activeGamesIndex++;\\n      }\\n    }\\n    return activeGames;\\n  }\\n\\n  function getActiveGamesByPlayer(address _player) external view override returns (Game[] memory) {\\n    uint256 activeGamesByPlayerIndex;\\n    for (uint256 i; i < games.length; i++) {\\n      if (\\n        (games[i].status == Status.STARTED && games[i].player1 == _player) || (games[i].status != Status.CREATED && games[i].player2 == _player)\\n      ) {\\n        activeGamesByPlayerIndex++;\\n      }\\n    }\\n    Game[] memory activeGamesByPlayer = new Game[](activeGamesByPlayerIndex);\\n    delete activeGamesByPlayerIndex;\\n    for (uint256 i; i < games.length; i++) {\\n      if (\\n        (games[i].status == Status.STARTED && games[i].player1 == _player) || (games[i].status != Status.CREATED && games[i].player2 == _player)\\n      ) {\\n        activeGamesByPlayer[activeGamesByPlayerIndex] = games[i];\\n        activeGamesByPlayerIndex++;\\n      }\\n    }\\n    return activeGamesByPlayer;\\n  }\\n\\n  function getActivePlayers() external view override returns (address[] memory) {\\n    uint256 preActivePlayersIndex;\\n    for (uint256 i; i < games.length; i++) {\\n      if (games[i].status == Status.STARTED) {\\n        preActivePlayersIndex += 2;\\n      } else if (games[i].status != Status.CREATED) {\\n        preActivePlayersIndex++;\\n      }\\n    }\\n    address[] memory preActivePlayers = new address[](preActivePlayersIndex);\\n    delete preActivePlayersIndex;\\n    uint256 activePlayersIndex;\\n    uint256 player1Count;\\n    uint256 player2Count;\\n    for (uint256 i; i < games.length; i++) {\\n      if (games[i].status == Status.STARTED && games[i].player1 != games[i].player2) {\\n        preActivePlayers[preActivePlayersIndex] = games[i].player1;\\n        preActivePlayersIndex++;\\n        preActivePlayers[preActivePlayersIndex] = games[i].player2;\\n        preActivePlayersIndex++;\\n        for (uint256 j; j < preActivePlayersIndex; j++) {\\n          if (preActivePlayers[j] == games[i].player1) {\\n            player1Count++;\\n          } else if (preActivePlayers[j] == games[i].player2) {\\n            player2Count++;\\n          }\\n        }\\n        if (player1Count == 1) {\\n          activePlayersIndex++;\\n        }\\n        if (player2Count == 1) {\\n          activePlayersIndex++;\\n        }\\n        delete player1Count;\\n        delete player2Count;\\n      } else if (games[i].status != Status.CREATED) {\\n        preActivePlayers[preActivePlayersIndex] = games[i].player2;\\n        preActivePlayersIndex++;\\n        for (uint256 j; j < preActivePlayersIndex; j++) {\\n          if (preActivePlayers[j] == games[i].player2) {\\n            player2Count++;\\n          }\\n        }\\n        if (player2Count == 1) {\\n          activePlayersIndex++;\\n        }\\n        delete player2Count;\\n      }\\n    }\\n    address[] memory activePlayers = new address[](activePlayersIndex);\\n    delete preActivePlayersIndex;\\n    delete activePlayersIndex;\\n    for (uint256 i; i < games.length; i++) {\\n      if (games[i].status == Status.STARTED && games[i].player1 != games[i].player2) {\\n        preActivePlayersIndex += 2;\\n        for (uint256 j; j < preActivePlayersIndex; j++) {\\n          if (preActivePlayers[j] == games[i].player1) {\\n            player1Count++;\\n          } else if (preActivePlayers[j] == games[i].player2) {\\n            player2Count++;\\n          }\\n        }\\n        if (player1Count == 1) {\\n          activePlayers[activePlayersIndex] = games[i].player1;\\n          activePlayersIndex++;\\n        }\\n        if (player2Count == 1) {\\n          activePlayers[activePlayersIndex] = games[i].player2;\\n          activePlayersIndex++;\\n        }\\n        delete player1Count;\\n        delete player2Count;\\n      } else if (games[i].status != Status.CREATED) {\\n        preActivePlayersIndex++;\\n        for (uint256 j; j < preActivePlayersIndex; j++) {\\n          if (preActivePlayers[j] == games[i].player2) {\\n            player2Count++;\\n          }\\n        }\\n        if (player2Count == 1) {\\n          activePlayers[activePlayersIndex] = games[i].player2;\\n          activePlayersIndex++;\\n        }\\n        delete player2Count;\\n      }\\n    }\\n    return activePlayers;\\n  }\\n\\n  function getEtherBalance() external view returns (uint256) {\\n    return address(this).balance;\\n  }\\n\\n  function _deleteGame(uint256 _gameId) private {\\n    Game storage game = games[_gameIdToIndex[_gameId]];\\n    emit GameDeleted(msg.sender, _gameId, game);\\n    games[_gameIdToIndex[_gameId]] = games[games.length - 1];\\n    _gameIdToIndex[games[games.length - 1].id] = _gameIdToIndex[_gameId];\\n    delete _gameIdToIndex[_gameId];\\n    games.pop();\\n  }\\n\\n  function _decryptMove(uint256 _gameId, bytes calldata _seed) private view returns (Game memory) {\\n    Game memory gameM = games[_gameIdToIndex[_gameId]];\\n    if (\\n      keccak256(abi.encodePacked(Hand.ROCK, _seed)) == gameM.encryptedMove ||\\n      keccak256(abi.encodePacked(_seed, Hand.ROCK)) == gameM.encryptedMove\\n    ) {\\n      gameM.decryptedMove = Hand.ROCK;\\n    } else if (\\n      keccak256(abi.encodePacked(Hand.PAPER, _seed)) == gameM.encryptedMove ||\\n      keccak256(abi.encodePacked(_seed, Hand.PAPER)) == gameM.encryptedMove\\n    ) {\\n      gameM.decryptedMove = Hand.PAPER;\\n    } else if (\\n      keccak256(abi.encodePacked(Hand.SCISSORS, _seed)) == gameM.encryptedMove ||\\n      keccak256(abi.encodePacked(_seed, Hand.SCISSORS)) == gameM.encryptedMove\\n    ) {\\n      gameM.decryptedMove = Hand.SCISSORS;\\n    } else {\\n      revert('Decryption failed');\\n    }\\n    return gameM;\\n  }\\n}\\n\",\"keccak256\":\"0x46745c126744f6b8ce5ee11db7b42ef8face0ecf1af111e447641c482e1259b0\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1034,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "games",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(Game)831_storage)dyn_storage"
      },
      {
        "astId": 1038,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "playerToId",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1042,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_gameIdToIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1044,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "gamesCreated",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1046,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "totalPlayerIds",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1049,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "rpsPrice",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1052,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "rpsFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Game)831_storage)dyn_storage": {
        "base": "t_struct(Game)831_storage",
        "encoding": "dynamic_array",
        "label": "struct IRockPaperScissors.Game[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Hand)801": {
        "encoding": "inplace",
        "label": "enum IRockPaperScissors.Hand",
        "numberOfBytes": "1"
      },
      "t_enum(Status)807": {
        "encoding": "inplace",
        "label": "enum IRockPaperScissors.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Game)831_storage": {
        "encoding": "inplace",
        "label": "struct IRockPaperScissors.Game",
        "members": [
          {
            "astId": 809,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 811,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "player1",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 813,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "player2",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 815,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "bet",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 817,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "duration",
            "offset": 0,
            "slot": "4",
            "type": "t_uint16"
          },
          {
            "astId": 819,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "timestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 821,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "encryptedMove",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes32"
          },
          {
            "astId": 824,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "decryptedMove",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(Hand)801"
          },
          {
            "astId": 827,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "move",
            "offset": 1,
            "slot": "7",
            "type": "t_enum(Hand)801"
          },
          {
            "astId": 830,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "status",
            "offset": 2,
            "slot": "7",
            "type": "t_enum(Status)807"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}